package main

import (
    "fmt"
    "strings"
    "text/template"
)

var (
    appGen = `
/**
  app_gen.c, James Condron {{ .Year }}

  DO NOT EDIT - THIS FILE IS AUTOGENERATED

  Return paged records data for the menu to show
 **/

char *records[{{ len .Items }}] = {
  {{ range .Items }}"{{.Case}}{{.Pos}}: {{.Artist}}: {{.Title}}",{{ end }}
};

char* record_name(int line) {
  return records[line];
}
`
)

var funcMap = template.FuncMap{
    "tracks": func(tracks []Track) string {
        sA := make([]string, len(tracks))

        for idx, t := range tracks {
            // Screen is only big enough for 20, and we're not
            // going to bother writing a pager
            if idx > 19 {
                break
            }

            sA[idx] = fmt.Sprintf(`"%s - %s"`, t.Track, t.Title)
        }

        return strings.Join(sA, ",")
    },
}

type Templater struct {
    Year  int
    Items []Record
}

func (t Templater) Template() (output string, err error) {
    sb := &strings.Builder{}
    tmpl, err := template.New("appGen").Funcs(funcMap).Parse(appGen)
    if err != nil {
        return
    }

    err = tmpl.Execute(sb, t)
    if err != nil {
        return
    }

    return sb.String(), nil
}
